<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" xml:lang="en-US">
<title>JRAMPERSAD::EXPONENTIAL::Function Class Reference</title>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary></indexterm>
<para>

<para>class representing an Exponential <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> (e.g 2x^2 + 4x - 1) </para>
 
</para>
<para>
<computeroutput>#include &lt;Exponential.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a771e5f172d0738a6b56a3406ddea5779">Function</link> (const unsigned short &amp;Lrgst_expo)</para>

<para>Constructor for <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> class. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1afc95333a173bc120f6f9519dae853b3a"/>virtual <emphasis role="strong">~Function</emphasis> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a2d7ac0d79af16746f89309f758adf40c"/><emphasis role="strong">Function</emphasis> (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;other)=default</para>

<para>Copy Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a2f4cd78e5a95d1862b4389e81ef136da"/><emphasis role="strong">Function</emphasis> (<link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;&amp;other) noexcept=default</para>

<para>Move Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a450305ad4a40a262d378b3781d87a043"/><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; <emphasis role="strong">operator=</emphasis> (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;other)=default</para>

<para>Copy Assignment operator. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1af58e47ffa93dc7dd6b336327058731ff"/><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; <emphasis role="strong">operator=</emphasis> (<link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;&amp;other) noexcept=default</para>

<para>Move Assignment operator. </para>
</listitem>
            <listitem><para>void <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ac27a8c4c7a6b39d087c8c20a63756cb3">SetConstants</link> (const std::vector&lt; int64_t &gt; &amp;constnts)</para>

<para>Sets the constants of the function. </para>
</listitem>
            <listitem><para>void <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a6f92240916726bfa24fea0f846381060">SetConstants</link> (std::vector&lt; int64_t &gt; &amp;&amp;constnts)</para>

<para>Sets the constants of the function. </para>
</listitem>
            <listitem><para><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a24f53f18a66c4911c9ec89f98b2f6781">operator*=</link> (const int64_t &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1af05a7be6e85e4879185a84dc32cdf79c">differential</link> () const</para>

<para>Calculates the differential (dy/dx) of the <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link>. </para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a2fe7e79ec57cb7160c783c20870fe855">get_real_roots</link> (const <link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link> &amp;options=<link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link>()) const</para>

<para>Uses a genetic algorithm to find the approximate roots of the function. </para>
</listitem>
            <listitem><para>double <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a3df87946deead508714d3d6da50231ef">solve_y</link> (const double &amp;x_val) const</para>

<para>Solves for y when x = user value. </para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ac6f66aef23d97a47707796a9891fda80">solve_x</link> (const double &amp;y_val, const <link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link> &amp;options=<link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link>()) const</para>

<para>Uses a genetic algorithm to find the values of x where y = user value. </para>
</listitem>
            <listitem><para>auto <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a8e355925ec8a283ad7a74a5c4832d4a8">GetWhatIsTheLargestExponent</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a9d14c1b8a7401565a054837df5708ac8">QuadraticSolve</link> (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;f)</para>

<para>Uses the quadratic function to solve the roots of an entered quadratic equation. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a9715ead4f7565aea73b2b956d32a8c2e">operator&lt;&lt;</link> (std::ostream &amp;os, const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> func)</para>
</listitem>
            <listitem><para><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ac67d5be3dac9ab01eca47b11aaadb786">operator+</link> (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;f1, const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;f2)</para>
</listitem>
            <listitem><para><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5e5034306a381d48ef50cce10f8f76c8">operator-</link> (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;f1, const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;f2)</para>
</listitem>
            <listitem><para><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5bb4eeaf7c3f6efe1c4eb1cd128d0d5e">operator*</link> (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp;f, const int64_t &amp;c)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>class representing an Exponential <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> (e.g 2x^2 + 4x - 1) </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a771e5f172d0738a6b56a3406ddea5779"/><section>
    <title>Function()</title>
<indexterm><primary>Function</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>Function</secondary></indexterm>
<para><computeroutput>JRAMPERSAD::EXPONENTIAL::Function::Function (const unsigned short &amp; Lrgst_expo)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor for <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> class. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Lrgst_expo</entry><entry>
<para>The largest exponent in the function (e.g 2 means largest exponent is x^2) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1af05a7be6e85e4879185a84dc32cdf79c"/><section>
    <title>differential()</title>
<indexterm><primary>differential</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>differential</secondary></indexterm>
<para><computeroutput><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> JRAMPERSAD::EXPONENTIAL::Function::differential ( ) const</computeroutput></para><para>

<para>Calculates the differential (dy/dx) of the <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link>. </para>
</para>

<para><formalpara><title>Returns</title>

<para>a <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> representing the differential (dy/dx) of the calling function object </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a2fe7e79ec57cb7160c783c20870fe855"/><section>
    <title>get_real_roots()</title>
<indexterm><primary>get_real_roots</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>get_real_roots</secondary></indexterm>
<para><computeroutput>std::vector&lt; double &gt; JRAMPERSAD::EXPONENTIAL::Function::get_real_roots (const <link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link> &amp; options = <computeroutput><link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link>()</computeroutput>
) const</computeroutput></para><para>

<para>Uses a genetic algorithm to find the approximate roots of the function. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>options</entry><entry>
<para><link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link> object specifying the options to run the algorithm </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A vector containing a n number of approximate root values (n = sample_size as defined in options) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a8e355925ec8a283ad7a74a5c4832d4a8"/><section>
    <title>GetWhatIsTheLargestExponent()</title>
<indexterm><primary>GetWhatIsTheLargestExponent</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>GetWhatIsTheLargestExponent</secondary></indexterm>
<para><computeroutput>auto JRAMPERSAD::EXPONENTIAL::Function::GetWhatIsTheLargestExponent ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para><formalpara><title>Returns</title>

<para>lrgst_expo </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a24f53f18a66c4911c9ec89f98b2f6781"/><section>
    <title>operator*=()</title>
<indexterm><primary>operator*=</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; JRAMPERSAD::EXPONENTIAL::Function::operator*= (const int64_t &amp; c)</computeroutput></para>
<para>Operator to multiply a function by a constant (Scaling it) </para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ac27a8c4c7a6b39d087c8c20a63756cb3"/><section>
    <title>SetConstants()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>SetConstants</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>SetConstants</secondary></indexterm>
<para><computeroutput>void JRAMPERSAD::EXPONENTIAL::Function::SetConstants (const std::vector&lt; int64_t &gt; &amp; constnts)</computeroutput></para><para>

<para>Sets the constants of the function. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>constnts</entry><entry>
<para>An array with the constants for the function (e.g 2, 1, 3 = 2x^2 + 1x - 3) size of array MUST be lrgst_expo + 1 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a6f92240916726bfa24fea0f846381060"/><section>
    <title>SetConstants()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>SetConstants</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>SetConstants</secondary></indexterm>
<para><computeroutput>void JRAMPERSAD::EXPONENTIAL::Function::SetConstants (std::vector&lt; int64_t &gt; &amp;&amp; constnts)</computeroutput></para><para>

<para>Sets the constants of the function. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>constnts</entry><entry>
<para>An array with the constants for the function (e.g 2, 1, 3 = 2x^2 + 1x - 3) size of array MUST be lrgst_expo + 1 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ac6f66aef23d97a47707796a9891fda80"/><section>
    <title>solve_x()</title>
<indexterm><primary>solve_x</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>solve_x</secondary></indexterm>
<para><computeroutput>std::vector&lt; double &gt; JRAMPERSAD::EXPONENTIAL::Function::solve_x (const double &amp; y_val, const <link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link> &amp; options = <computeroutput><link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link>()</computeroutput>
) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Uses a genetic algorithm to find the values of x where y = user value. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>y_val</entry><entry>
<para>The return value that you would like to find the approximate x values needed to solve when entered into the function </para>
</entry>
                            </row>
                            <row>
<entry>options</entry><entry>
<para><link linkend="_struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options">GA_Options</link> object specifying the options to run the algorithm </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A vector containing a n number of x values that cause the function to approximately equal the y_val (n = sample_size as defined in options) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a3df87946deead508714d3d6da50231ef"/><section>
    <title>solve_y()</title>
<indexterm><primary>solve_y</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>solve_y</secondary></indexterm>
<para><computeroutput>double JRAMPERSAD::EXPONENTIAL::Function::solve_y (const double &amp; x_val) const</computeroutput></para><para>

<para>Solves for y when x = user value. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x_val</entry><entry>
<para>the X Value you&apos;d like the function to use </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the Y value the function returns based on the entered X value </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5bb4eeaf7c3f6efe1c4eb1cd128d0d5e"/><section>
    <title>operator*</title>
<indexterm><primary>operator*</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> operator* (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; f, const int64_t &amp; c)<computeroutput>[friend]</computeroutput></computeroutput></para>
<para>Operator to multiply a function by a constant (Scaling it) </para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ac67d5be3dac9ab01eca47b11aaadb786"/><section>
    <title>operator+</title>
<indexterm><primary>operator+</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> operator+ (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; f1, const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; f2)<computeroutput>[friend]</computeroutput></computeroutput></para>
<para>Operator to add two functions </para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5e5034306a381d48ef50cce10f8f76c8"/><section>
    <title>operator-</title>
<indexterm><primary>operator-</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> operator- (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; f1, const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; f2)<computeroutput>[friend]</computeroutput></computeroutput></para>
<para>Operator to subtract two functions </para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a9715ead4f7565aea73b2b956d32a8c2e"/><section>
    <title>operator&lt;&lt;</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; os, const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> func)<computeroutput>[friend]</computeroutput></computeroutput></para>
<para>Operator function to display function object in a human readable format </para>
</section>
<anchor xml:id="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a9d14c1b8a7401565a054837df5708ac8"/><section>
    <title>QuadraticSolve</title>
<indexterm><primary>QuadraticSolve</primary><secondary>JRAMPERSAD::EXPONENTIAL::Function</secondary></indexterm>
<indexterm><primary>JRAMPERSAD::EXPONENTIAL::Function</primary><secondary>QuadraticSolve</secondary></indexterm>
<para><computeroutput>std::vector&lt; double &gt; QuadraticSolve (const <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> &amp; f)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Uses the quadratic function to solve the roots of an entered quadratic equation. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>f</entry><entry>
<para>Quadratic function you&apos;d like to find the roots of (Quadratic <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> object is a <link linkend="_class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function">Function</link> object who&apos;s lrgst_expo value = 2 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a vector containing the roots </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Exponential/Exponential.h</section>
</section>
