<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespace_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l" kind="namespace" language="C++">
    <compoundname>JRAMPERSAD::EXPONENTIAL</compoundname>
    <innerclass refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" prot="public">JRAMPERSAD::EXPONENTIAL::Function</innerclass>
    <innerclass refid="struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options" prot="public">JRAMPERSAD::EXPONENTIAL::GA_Options</innerclass>
    <innernamespace refid="namespace_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1detail">JRAMPERSAD::EXPONENTIAL::detail</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="_exponential_8h_1a74ba0c80c30d2b4a2746dcafafbb6331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">double</ref> &gt;</type>
        <definition>std::vector&lt; double &gt; JRAMPERSAD::EXPONENTIAL::QuadraticSolve</definition>
        <argsstring>(const Function&lt; 2 &gt; &amp;f)</argsstring>
        <name>QuadraticSolve</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::QuadraticSolve</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; 2 &gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Uses the quadratic function to solve the roots of an entered quadratic equation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Quadratic function you&apos;d like to find the roots of (Quadratic <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> object is a Function&lt;2&gt; object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector containing the roots </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="280" column="13" bodyfile="Exponential/Exponential.h" bodystart="280" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="_exponential_8h_1a949e2b83422e0ba69d947c8ae8b6b33e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>e1</declname>
            <defname>e1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>e2</declname>
            <defname>e2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>r</declname>
            <defname>r</defname>
            <defval>(e1 &gt; e2 ? e1 : e2)</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">r</ref> &gt;</type>
        <definition>Function&lt; r &gt; JRAMPERSAD::EXPONENTIAL::operator+</definition>
        <argsstring>(const Function&lt; e1 &gt; &amp;f1, const Function&lt; e2 &gt; &amp;f2)</argsstring>
        <name>operator+</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::operator+</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">e1</ref> &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">e2</ref> &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="301" column="10" bodyfile="Exponential/Exponential.h" bodystart="301" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="_exponential_8h_1a9c05c4f210dac69008764b974749d9d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>e1</declname>
            <defname>e1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>e2</declname>
            <defname>e2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>r</declname>
            <defname>r</defname>
            <defval>(e1 &gt; e2 ? e1 : e2)</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">r</ref> &gt;</type>
        <definition>Function&lt; r &gt; JRAMPERSAD::EXPONENTIAL::operator-</definition>
        <argsstring>(const Function&lt; e1 &gt; &amp;f1, const Function&lt; e2 &gt; &amp;f2)</argsstring>
        <name>operator-</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::operator-</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">e1</ref> &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">e2</ref> &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="333" column="10" bodyfile="Exponential/Exponential.h" bodystart="333" bodyend="366"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Exponential/Exponential.h" line="15" column="1"/>
  </compounddef>
</doxygen>
