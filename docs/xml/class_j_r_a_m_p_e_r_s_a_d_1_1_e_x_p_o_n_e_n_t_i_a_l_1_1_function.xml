<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kind="class" language="C++" prot="public">
    <compoundname>JRAMPERSAD::EXPONENTIAL::Function</compoundname>
    <includes refid="_exponential_8h" local="no">Exponential.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref></type>
        <declname>lrgst_expo</declname>
        <defname>lrgst_expo</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a77a9d035d39b19c73c1c58d76aaa7820" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref> &gt;</type>
        <definition>std::vector&lt;int&gt; JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::constants</definition>
        <argsstring></argsstring>
        <name>constants</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::constants</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="147" column="13" bodyfile="Exponential/Exponential.h" bodystart="147" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a8f5b8975b6e7318c093a963cd0b43db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">double</ref> &gt;</type>
        <definition>std::vector&lt; double &gt; QuadraticSolve</definition>
        <argsstring>(const Function&lt; 2 &gt; &amp;f)</argsstring>
        <name>QuadraticSolve</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::QuadraticSolve</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; 2 &gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Uses the quadratic function to solve the roots of an entered quadratic equation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Quadratic function you&apos;d like to find the roots of (Quadratic <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> object is a Function&lt;2&gt; object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector containing the roots </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="151" column="20" bodyfile="Exponential/Exponential.h" bodystart="280" bodyend="298"/>
      </memberdef>
      <memberdef kind="friend" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5de27194ad9a38f44771637a0f187562" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Function&lt; lrgst_expo &gt; func)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">lrgst_expo</ref> &gt;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="172" column="8" bodyfile="Exponential/Exponential.h" bodystart="172" bodyend="215"/>
      </memberdef>
      <memberdef kind="friend" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a08885f8e67d9d34770121c63c16f2eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref></type>
            <declname>e1</declname>
            <defname>e1</defname>
          </param>
          <param>
            <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref></type>
            <declname>e2</declname>
            <defname>e2</defname>
          </param>
          <param>
            <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref></type>
            <declname>r</declname>
            <defname>r</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">r</ref> &gt;</type>
        <definition>Function&lt; r &gt; operator+</definition>
        <argsstring>(const Function&lt; e1 &gt; &amp;f1, const Function&lt; e2 &gt; &amp;f2)</argsstring>
        <name>operator+</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::operator+</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">e1</ref> &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">e2</ref> &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="218" column="17" bodyfile="Exponential/Exponential.h" bodystart="301" bodyend="330"/>
      </memberdef>
      <memberdef kind="friend" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1afde1d3a278a171c30ff0ff00f65d120e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref></type>
            <declname>e1</declname>
            <defname>e1</defname>
          </param>
          <param>
            <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref></type>
            <declname>e2</declname>
            <defname>e2</defname>
          </param>
          <param>
            <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref></type>
            <declname>r</declname>
            <defname>r</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">r</ref> &gt;</type>
        <definition>Function&lt; r &gt; operator-</definition>
        <argsstring>(const Function&lt; e1 &gt; &amp;f1, const Function&lt; e2 &gt; &amp;f2)</argsstring>
        <name>operator-</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::operator-</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">e1</ref> &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">e2</ref> &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="220" column="17" bodyfile="Exponential/Exponential.h" bodystart="333" bodyend="366"/>
      </memberdef>
      <memberdef kind="friend" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ae95957956718c40093891faf8dd52b0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">lrgst_expo</ref> &gt;</type>
        <definition>Function&lt; lrgst_expo &gt; operator*</definition>
        <argsstring>(const Function&lt; lrgst_expo &gt; &amp;f, const int &amp;c)</argsstring>
        <name>operator*</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::operator*</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">lrgst_expo</ref> &gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="223" column="17" bodyfile="Exponential/Exponential.h" bodystart="223" bodyend="233"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a0585614da72409acfbed262411ea7882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::Function</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;constnts)</argsstring>
        <name>Function</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::Function</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> std::vector&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref> &gt; &amp;</type>
          <declname>constnts</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constnts</parametername>
</parameternamelist>
<parameterdescription>
<para>An array with the constants for the function (e.g 2, 1, 3 = 2x^2 + 1x - 3) size of array MUST be lrgst_expo + 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="158" column="1" bodyfile="Exponential/Exponential.h" bodystart="369" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a7216329180e93c93204f4061be9e560b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::Function</definition>
        <argsstring>(std::vector&lt; int &gt; &amp;&amp;constnts)</argsstring>
        <name>Function</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::Function</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref> &gt; &amp;&amp;</type>
          <declname>constnts</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constnts</parametername>
</parameternamelist>
<parameterdescription>
<para>An array with the constants for the function (e.g 2, 1, 3 = 2x^2 + 1x - 3) size of array MUST be lrgst_expo + 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="163" column="1" bodyfile="Exponential/Exponential.h" bodystart="384" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a38038a3b3f371ca62098ad4d4c510966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::Function</definition>
        <argsstring>(const Function &amp;other)=default</argsstring>
        <name>Function</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::Function</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1aaafd98fd5dc5d0f9e4503bed1d49d323" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::Function</definition>
        <argsstring>(Function &amp;&amp;other) noexcept=default</argsstring>
        <name>Function</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::Function</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a808783ae8be714fbbc5ddbd71db5ba30" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::~Function</definition>
        <argsstring>()</argsstring>
        <name>~Function</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::~Function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="166" column="9" bodyfile="Exponential/Exponential.h" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5c6ff5d442c8a74503312fb6bc75a1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> &amp;</type>
        <definition>Function &amp; JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::operator=</definition>
        <argsstring>(const Function &amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::operator=</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="168" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ac8934939c219d782fd1e02bca393318d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> &amp;</type>
        <definition>Function &amp; JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::operator=</definition>
        <argsstring>(Function &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::operator=</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="169" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a71628f495a8a26f9584487abf05293b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">lrgst_expo</ref> &gt; &amp;</type>
        <definition>Function&lt; lrgst_expo &gt; &amp; JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::operator*=</definition>
        <argsstring>(const int &amp;c)</argsstring>
        <name>operator*=</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::operator*=</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">int</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="234" column="10" bodyfile="Exponential/Exponential.h" bodystart="234" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ae43c705b427ac1ef27aed061a63e500e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref>&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">lrgst_expo</ref> - 1 &gt;</type>
        <definition>Function&lt; lrgst_expo - 1 &gt; JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::differential</definition>
        <argsstring>() const</argsstring>
        <name>differential</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::differential</qualifiedname>
        <briefdescription>
<para>Calculates the differential (dy/dx) of the function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a function representing the differential (dy/dx) of the calling function object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="250" column="10" bodyfile="Exponential/Exponential.h" bodystart="405" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ad090de9f6636094f14f1279615fccbc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">double</ref> &gt;</type>
        <definition>std::vector&lt; double &gt; JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::get_real_roots</definition>
        <argsstring>(const GA_Options &amp;options=GA_Options()) const</argsstring>
        <name>get_real_roots</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::get_real_roots</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options" kindref="compound">GA_Options</ref> &amp;</type>
          <declname>options</declname>
          <defval><ref refid="struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options" kindref="compound">GA_Options</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> that uses a genetic algorithm to find the approximate roots of the function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options" kindref="compound">GA_Options</ref> object specifying the options to run the algorithm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing a n number of approximate root values (n = sample_size as defined in options) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="257" column="14" bodyfile="Exponential/Exponential.h" bodystart="420" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5464547daff0c43faccdc40ea480bab4" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">double</ref></type>
        <definition>double JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::solve_y</definition>
        <argsstring>(const double &amp;x_val) const noexcept</argsstring>
        <name>solve_y</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::solve_y</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">double</ref> &amp;</type>
          <declname>x_val</declname>
        </param>
        <briefdescription>
<para><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> that solves for y when x = user value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the X Value you&apos;d like the function to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the Y value the function returns based on the entered X value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="264" column="9" bodyfile="Exponential/Exponential.h" bodystart="499" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a46b9671c4a29b2b2b34586048a3b795a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">double</ref> &gt;</type>
        <definition>std::vector&lt; double &gt; JRAMPERSAD::EXPONENTIAL::Function&lt; lrgst_expo &gt;::solve_x</definition>
        <argsstring>(const double &amp;y_val, const GA_Options &amp;options=GA_Options()) const</argsstring>
        <name>solve_x</name>
        <qualifiedname>JRAMPERSAD::EXPONENTIAL::Function::solve_x</qualifiedname>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">double</ref> &amp;</type>
          <declname>y_val</declname>
        </param>
        <param>
          <type><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">const</ref> <ref refid="struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options" kindref="compound">GA_Options</ref> &amp;</type>
          <declname>options</declname>
          <defval><ref refid="struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options" kindref="compound">GA_Options</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> that uses a genetic algorithm to find the values of x where y = user value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y_val</parametername>
</parameternamelist>
<parameterdescription>
<para>The return value that you would like to find the approximate x values needed to solve when entered into the function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_g_a___options" kindref="compound">GA_Options</ref> object specifying the options to run the algorithm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing a n number of x values that cause the function to approximately equal the y_val (n = sample_size as defined in options) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Exponential/Exponential.h" line="272" column="14" bodyfile="Exponential/Exponential.h" bodystart="517" bodyend="592"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class representing an Exponential <ref refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function" kindref="compound">Function</ref> (e.g 2x^2 + 4x - 1),. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>lrgst_expo</parametername>
</parameternamelist>
<parameterdescription>
<para>The largest exponent in the function (e.g 2 means largest exponent is x^2) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="Exponential/Exponential.h" line="144" column="1" bodyfile="Exponential/Exponential.h" bodystart="145" bodyend="273"/>
    <listofallmembers>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a77a9d035d39b19c73c1c58d76aaa7820" prot="private" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>constants</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ae43c705b427ac1ef27aed061a63e500e" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>differential</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a0585614da72409acfbed262411ea7882" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>Function</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a7216329180e93c93204f4061be9e560b" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>Function</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a38038a3b3f371ca62098ad4d4c510966" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>Function</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1aaafd98fd5dc5d0f9e4503bed1d49d323" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>Function</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ad090de9f6636094f14f1279615fccbc0" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>get_real_roots</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ae95957956718c40093891faf8dd52b0e" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>operator*</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a71628f495a8a26f9584487abf05293b8" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>operator*=</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a08885f8e67d9d34770121c63c16f2eea" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>operator+</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1afde1d3a278a171c30ff0ff00f65d120e" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>operator-</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5de27194ad9a38f44771637a0f187562" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5c6ff5d442c8a74503312fb6bc75a1ff" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>operator=</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1ac8934939c219d782fd1e02bca393318d" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>operator=</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a8f5b8975b6e7318c093a963cd0b43db6" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>QuadraticSolve</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a46b9671c4a29b2b2b34586048a3b795a" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>solve_x</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a5464547daff0c43faccdc40ea480bab4" prot="public" virt="non-virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>solve_y</name></member>
      <member refid="class_j_r_a_m_p_e_r_s_a_d_1_1_e_x_p_o_n_e_n_t_i_a_l_1_1_function_1a808783ae8be714fbbc5ddbd71db5ba30" prot="public" virt="virtual"><scope>JRAMPERSAD::EXPONENTIAL::Function</scope><name>~Function</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
